import numpy as np
import pandas as pd
import os

import pandas as pd

column_names = ['MovieID', 'Title', 'Genres']

Movies = pd.read_csv('/content/Movie RP.txt', sep='::', names=['MovieNo','Title', 'Genres'], engine='python', encoding='latin1')

Movies.dropna(inplace=True)

Movies.head()

Ratings = pd.read_csv('/content/Movie RP Ratings.txt',  sep='::', names= ['MovieID','Rating', 'Timestamp' ], engine='python', encoding='latin1')

Ratings.dropna(inplace=True)

Ratings.head()

Users = pd.read_csv('/content/Movie RP User.txt', sep='::', names=['UserId', 'Sex', 'Age', 'Occupation', 'Zip-code'], engine='python', encoding='latin1')

Users.dropna(inplace=True)

Users.head()

Ratings = pd.DataFrame(Ratings)

Movies = pd.DataFrame(Movies)

Master_data = User_ratings.merge(Movies, left_on='MovieID', right_on='MovieNo')

Master_data


Users = pd.DataFrame(Users)

User_ratings = Users.merge(Ratings, left_on='UserId', right_on='MovieID')

User_ratings

Master_data.describe()

Master_data.info()

highly_rated_movies = Master_data[Master_data['Rating'] == 5]

print(highly_rated_movies)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

ratings_count = Master_data.groupby('MovieID')['Rating'].count()


plt.figure(figsize=(10, 6))
plt.hist(ratings_count, bins=50, edgecolor='k', alpha=0.7)
plt.title('Movie Ratings Distribution')
plt.xlabel('Number of Ratings')
plt.ylabel('Number of Movies')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(ratings_count, bins=50, kde=True)
plt.title('Movie Ratings Distribution')
plt.xlabel('Number of Ratings')
plt.ylabel('Number of Movies')
plt.show()


plt.hist(Master_data['Rating'], bins=5, range=(1, 5), edgecolor='black')
plt.xlabel('Rating')
plt.ylabel('Number of Movies')
plt.title('Movie Ratings Distribution')
plt.show()


movie_ratings = Master_data[Master_data['Rating'] == 5].groupby('Title')['Rating'].count().reset_index()

top_rated_movies = movie_ratings.sort_values(by='Rating', ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(top_rated_movies['Title'][:20], top_rated_movies['Rating'][:20])
plt.xlabel('Movie Title')
plt.ylabel('Number of 5-Star Ratings')
plt.title('Top-Rated Movies with Many 5-Star Ratings')
plt.xticks(rotation=90)
plt.show()

low_rated_movies = Master_data[Master_data['Rating'] == 1]

movie_ratings_count = low_rated_movies['Title'].value_counts().reset_index()
movie_ratings_count.columns = ['Title', 'Number of 1-Star Ratings']

top_low_rated_movies = movie_ratings_count.sort_values(by='Number of 1-Star Ratings', ascending=False)


plt.figure(figsize=(12, 6))
plt.bar(top_low_rated_movies['Title'][:10], top_low_rated_movies['Number of 1-Star Ratings'][:10])
plt.xlabel('Movie Title')
plt.ylabel('Number of 1-Star Ratings')
plt.title('Movies with Many 1-Star Ratings')
plt.xticks(rotation=90)
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np


X = Master_data[['Age', 'Occupation']]
y = Master_data['Rating']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (R2) Score: {r2:.2f}")

new_data = np.array([[30, 10]])
predicted_rating = model.predict(new_data)
print(f"Predicted Rating: {predicted_rating[0]:.2f}")

pip install scikit-surprise

from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split
from surprise import accuracy
import pandas as pd


reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(Master_data[['UserId', 'MovieID', 'Rating']], reader)

trainset, testset = train_test_split(data, test_size=0.2, random_state=42)

model = SVD()
model.fit(trainset)

predictions = model.test(testset)

rmse = accuracy.rmse(predictions)
print(f"RMSE: {rmse:.2f}")

user_id = 1
movies_rated_by_user = Master_data[Master_data['UserId'] == user_id]['MovieID']
movies_not_rated_by_user = Master_data[~Master_data['MovieID'].isin(movies_rated_by_user)]
movies_to_recommend = movies_not_rated_by_user['MovieID'].unique()

user_predictions = [model.predict(user_id, movie_id) for movie_id in movies_to_recommend]

sorted_predictions = sorted(user_predictions, key=lambda x: x.est, reverse=True)
top_n = 10

recommended_movies = set()
top_movie_titles = []

for prediction in sorted_predictions:
    if len(recommended_movies) >= top_n:
        break
    if prediction.iid not in recommended_movies:
        recommended_movies.add(prediction.iid)
        top_movie_titles.append(Master_data[Master_data['MovieID'] == prediction.iid]['Title'].values[0])

print(f"Top {top_n} Movie Recommendations for User {user_id}:\n")
for i, title in enumerate(top_movie_titles):
    print(f"{i + 1}. {title}")

